Help Save the World
-------------------

Boost is a fairly extensive set of libraries, of which I personally
use but a very small part.  I greatly appreciate folks that send
patches to the BTS.  Please do have a look at the outstanding bug
reports and send me hints or patches if you have extra information.


Getting Started
---------------

One of the main goals of Boost is source portability across operating
systems and compilers. Nothing is instead guaranted about binary
compatibility, which in C++ is much more difficult topic than in C.

To protect users from harming themselves, Boost developers encode as
much information as possible in the library names. So Boost libraries
get scary names like libboost_wserialization-gcc42-mt-d-1_34_1.so.1.34.1.

Please refer to the Boost documentation in order to understand how to
build the library name you are looking for:

  http://www.boost.org/more/getting_started/unix-variants.html#library-naming

Currently does not exist a portable and automatic way to build these
names. You may guess pkg-config may be of help here but work is still
in progress.


Unportable Debian-specific way to solve the above problem
---------------------------------------------------------

The following table shows which components use a library (shared or
static) and the corresponding "-l" flag.

Beware that every library comes in two flavors, one for single-thread
and one for multi-thread uses (except Boost.Thread, which is only
multi-thread). To the following "-l" flags you need to append -mt in
case the multi-thread flavour is wanted (e.g. -lboost_date_time for
single-thread, -lboost_date_time-mt for multi-thread).

  Component              Link Flag                    Library Type
  ---------              ---------                    ------------
  Boost.Date_time        -lboost_date_time            static  shared
  Boost.Filesystem       -lboost_filesystem           static  shared
  Boost.Graph            -lboost_graph                static  shared
  Boost.IOStreams        -lboost_iostreams            static  shared
  Boost.Program_options  -lboost_program_options      static  shared
  Boost.Python           -lboost_python               static  shared
  Boost.Regex            -lboost_regex                static  shared
  Boost.Serialization    -lboost_serialization        static  shared
                         -lboost_wserialization       static  shared
  Boost.Signals          -lboost_signals              static  shared
  Boost.Test             -lboost_prg_exec_monitor     static  shared
                         -lboost_unit_test_framework  static  shared
  Boost.Thread           -lboost_thread               static  shared
  Boost.Wave             -lboost_wave                 static  shared


Most of Boost is installed using the package libboost-dev.
The components with a shared library have separate -dev packages.

There is extensive documentation available in the libboost-doc
package and at www.boost.org.


Threaded Applications
---------------------

You need to specify -pthread switch on the gcc command line to build
multi-thread applications. Remember to use the -mt library flavour.


Example Code
------------

All example code is shipped in libboost-doc package.

Some of the example code is linked to by the documentation, and thus
appears in a directory named

  /usr/share/doc/libboost-doc/HTML/libs/*/example

Example code that is not linked from the documentation appears in a
directory under

  /usr/share/doc/libboost-doc/examples/libs/


Use of boost/nondet_random.hpp
------------------------------

The use of this header file is subject to the availability of class
boost::random_device::impl. Boost libraries provide only an example
implementation which the user may use to fit her needs.

Such implementation is distributed by libboost-dev Debian package in
file /usr/share/doc/libboost-dev/examples/random_device.cpp. This file is
generally good enough for most linux users. Please add it to your build
process before filing another bug report against Boost Debian packages.


STLport
-------

Debian's boost packages prior to release 1.29.0-3 were built using
libstlport.  This is no longer the case.

If you have old boost-using code, you will need to change your build
process, removing any -I/usr/include/stlport or -llstport options.

* Why the change?

Until January 2003, Debian's default compiler was GCC 2.95.x.  The
standard C++ library that came with GCC 2.x was sufficiently buggy to
cause problems with boost.  STLport was a better implementation of STL
and enabled boost to function.

Debian now uses GCC 3.2 (or newer).  The standard C++ library has
improved enough to use with boost, so STLport is not longer used.

 -- Steve M. Robbins <smr@debian.org>, Fri Mar  5 22:42:23 2004
