#! /usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

export DH_OPTIONS
export CC

# set the number of build jobs
#JOBS = -j2

DEB_BUILD_ARCH ?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)

# Boost does not guarantee any ABI, it uses the full version in SONAME
SOVERSION = 1.34.1
SHLIBS_VERSION =
DEBIAN_SUFFIX = -2

# tags for library name decoration
boost_version = $(subst .,_,$(SOVERSION))
gcc_version = gcc42

# Boost libraries for which we want separate packages
boost_libs := date-time filesystem graph iostreams program-options python regex serialization signals test thread wave

# these are special cases, where shared library has not the same name of the Boost library
boost_lib_serialization := serialization wserialization
boost_lib_test := prg_exec_monitor unit_test_framework

# these are special cases for variants. normal cases have <empty>, -d, -mt, -mt-d variants
boost_variants_thread := -mt -mt-d

# return shared libraries for the given Boost library
boost_lib = $(if $(boost_lib_$(1)), $(boost_lib_$(1)), $(1))

# return variants for the given Boost library
boost_variants = $(if $(boost_variants_$(1)), $(boost_variants_$(1)), -st -st-d -mt -mt-d)

# helpers to make basic and decorated library names
mk_base_name = usr/lib/libboost_$(subst -,_,$(1))$(2)
mk_full_name = usr/lib/libboost_$(subst -,_,$(1))-$(gcc_version)$(2)-$(boost_version)

# helpers to make proper release/debug package names
mk_pkg_lib = libboost-$(if $(findstring -d,$(2)),dbg,$(1)$(SOVERSION)$(DEBIAN_SUFFIX))
mk_pkg_dev = libboost-$(if $(findstring -d,$(2)),dbg,$(1)-dev)
mk_deb_lib = debian/$(call mk_pkg_lib,$(1),$(2))
mk_deb_dev = debian/$(call mk_pkg_dev,$(1),$(2))
mk_ove_lib = $(call mk_deb_lib,$(1),$(2))/usr/share/lintian/overrides/$(call mk_pkg_lib,$(1),$(2))

# helpers with the side effect of writing debhelper files
mk_a_files = $(shell echo debian/tmp/$(call mk_full_name,$(2),$(3)).a >> $(call mk_deb_dev,$(1),$(3)).install)
mk_so_files = $(shell echo debian/tmp/$(call mk_full_name,$(2),$(3)).so.$(SOVERSION) >> $(call mk_deb_lib,$(1),$(3)).install)
mk_ln_files = $(shell echo $(call mk_full_name,$(2),$(3)).so.$(SOVERSION) $(call mk_full_name,$(2),$(3)).so >> $(call mk_deb_dev,$(1),$(3)).links)
mk_ln2_files = $(shell echo $(call mk_full_name,$(2),$(3)).so $(call mk_base_name,$(2),$(3)).so >> $(call mk_deb_dev,$(1),$(3)).links)
mk_ln3_files = $(shell echo $(call mk_full_name,$(2),$(3)).a $(call mk_base_name,$(2),$(3)).a >> $(call mk_deb_dev,$(1),$(3)).links)
mk_files = $(foreach fn,a so ln ln2 ln3,$(call mk_$(fn)_files,$(1),$(2),$(3)))

# helpers to make and install lintian override files
mk_override_files = echo $(call mk_pkg_lib,$(1)): package-name-doesnt-match-sonames >> $(call mk_ove_lib,$(1));
ins_lintian_overrides = install -m644 debian/$(1).lintian-overrides debian/$(1)/usr/share/lintian/overrides/$(1);

# invokes mk_files of every variant of every shared library of every Boost library
mk_debhelper_files = \
	$(foreach l, $(boost_libs), \
		echo "making debhelper files for $(l)..."; \
		$(call mk_override_files,$(l)) \
		$(foreach ll, $(call boost_lib,$(l)), \
			$(foreach v, $(call boost_variants,$(l)), \
				$(call mk_files,$(l),$(ll),$(subst -st,,$(v))) \
			) \
		) \
	)

TOOLSET_CONFIG="using gcc : 4.2 : g++-4.2 : <define>_REENTRANT ;"
ifeq ($(DEB_BUILD_ARCH), hppa)
TOOLSET_CONFIG="using gcc : 4.2 : g++-4.2 : <define>_REENTRANT <compileflags>-mlong-calls ;"
endif
PYTHON_CONFIG="using python : 2.4 : /usr ;"

exampledir = debian/libboost-doc/usr/share/doc/libboost-doc/examples
htmldir = debian/libboost-doc/usr/share/doc/libboost-doc/HTML
pyste_prefix = $(PWD)/debian/pyste/usr
bjam = $(shell pwd)/tools/jam/src/bjam

JAM = $(bjam) $(JOBS) -d2 --user-config=$(shell pwd)/user-config.jam -sHAVE_ICU=1

# BJAM segfaults if built with GCC 4.2, so build with GCC 4.1 to avoid problems.
# See 367825 for a proper fix.
$(bjam): CC=gcc-4.1
$(bjam):
	cd tools/jam/src && sh build.sh cc && mv bin.*/bjam .

build: build-stamp
build-stamp: $(bjam)
	dh_testdir

	echo $(TOOLSET_CONFIG) >> user-config.jam
	echo $(PYTHON_CONFIG) >> user-config.jam

	cd tools/bcp && $(JAM)
	cd tools/inspect/build && $(JAM)
	cd tools/wave/build && $(JAM)
	cd tools/regression/build && $(JAM)

	$(JAM) variant=release,debug threading=single,multi
	cd libs/python/pyste/install && python setup.py build

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp

	-cd tools && $(JAM) clean
	-$(JAM) clean
	cd libs/python/pyste/install && python setup.py clean

	rm -rf libs/python/pyste/install/build
	rm -rf tools/jam/src/bootstrap
	rm -rf tools/jam/src/bin.*
	rm -ff tools/jam/src/bjam
	rm -rf bin.v2 dist
	rm -rf user-config.jam

	rm -rf debian/libboost-*$(SOVERSION)$(DEBIAN_SUFFIX).lintian-overrides
	rm -rf debian/libboost-*$(SOVERSION)$(DEBIAN_SUFFIX).install
	rm -rf debian/libboost-*-dev.install
	rm -rf debian/libboost-*-dev.links
	rm -rf debian/libboost-dbg.install
	rm -rf debian/libboost-dbg.links

	dh_clean

install: DH_OPTIONS=-X.svn
install: build
	dh_testdir
	dh_testroot
	dh_clean -k

	$(JAM) --prefix=`pwd`/debian/tmp/usr install

	find debian/tmp/usr/include -type f | xargs chmod 644
	find debian/tmp -name .cvsignore | xargs rm -f
	find debian -empty -type f | xargs rm -f

	dh_installdirs -A usr/share/lintian/overrides

	# generate (some) debhelper files
	@$(call mk_debhelper_files)

	# package pyste
	cd libs/python/pyste/install && python setup.py install --no-compile --prefix=$(pyste_prefix) --install-lib=$(pyste_prefix)/share/python-support/pyste
	mv $(pyste_prefix)/bin/pyste.py $(pyste_prefix)/bin/pyste

	# package bcp
	dh_installdirs -pbcp usr/bin
	dh_install -pbcp dist/bin/bcp usr/bin
	dh_installman -pbcp debian/bcp.1

	# package libboost-dbg
	dh_install -plibboost-dbg
	dh_link -plibboost-dbg \
	   usr/lib/libboost_thread-mt-d.a usr/lib/libboost_thread-d.a \
	   usr/lib/libboost_thread-mt-d.so usr/lib/libboost_thread-d.so
	$(call ins_lintian_overrides,libboost-dbg)

	# package libboost-dev
	dh_install -plibboost-dev \
	   debian/tmp/usr/include/boost-$(boost_version)/boost \
	   usr/include
	$(call ins_lintian_overrides,libboost-dev)

	# package libboost-doc
	rm -rf $(htmldir)
	mkdir -p $(htmldir) $(htmldir)/more/css_0
	cp more/css_0/* $(htmldir)/more/css_0
	cat debian/documentation-files | xargs cp --parents --target-directory=$(htmldir)
	rm -rf $(htmldir)/boost
	dh_link -plibboost-doc \
	   usr/include/boost \
	   usr/share/doc/libboost-doc/HTML/boost

	mkdir -p $(exampledir)
	cat debian/example-files | xargs cp -a --parents --target-directory=$(exampledir)
	find $(exampledir) -type f | xargs chmod 644
	$(call ins_lintian_overrides,libboost-doc)


	# package libboost-date-time$(SOVERSION)
	dh_install -plibboost-date-time$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-date-time-dev
	dh_installdirs -plibboost-date-time-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/date_time* \
	   debian/libboost-date-time-dev/usr/include/boost
	dh_install -plibboost-date-time-dev
	dh_link -plibboost-date-time-dev

	# package libboost-filesystem$(SOVERSION)
	dh_install -plibboost-filesystem$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-filesystem-dev
	dh_installdirs -plibboost-filesystem-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/filesystem* \
	   debian/libboost-filesystem-dev/usr/include/boost
	dh_install -plibboost-filesystem-dev
	dh_link -plibboost-filesystem-dev

	# package libboost-graph$(SOVERSION)
	dh_install -plibboost-graph$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-graph-dev
	dh_installdirs -plibboost-graph-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/graph \
	   debian/libboost-graph-dev/usr/include/boost
	dh_install -plibboost-graph-dev
	dh_link -plibboost-graph-dev

	# package libboost-iostreams$(SOVERSION)
	dh_install -plibboost-iostreams$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-iostreams-dev
	dh_installdirs -plibboost-iostreams-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/iostreams* \
	   debian/libboost-iostreams-dev/usr/include/boost
	dh_install -plibboost-iostreams-dev
	dh_link -plibboost-iostreams-dev

	# package libboost-program-options$(SOVERSION)
	dh_install -plibboost-program-options$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-program-options-dev
	dh_installdirs -plibboost-program-options-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/program_options* \
	   debian/libboost-program-options-dev/usr/include/boost
	dh_install -plibboost-program-options-dev
	dh_link -plibboost-program-options-dev

	# package libboost-python$(SOVERSION)
	dh_install -plibboost-python$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-python-dev
	dh_installdirs -plibboost-python-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/python* \
	   debian/libboost-python-dev/usr/include/boost
	dh_install -plibboost-python-dev
	dh_link -plibboost-python-dev
	dh_install -plibboost-python-dev
	$(call ins_lintian_overrides,libboost-python-dev)

	# package libboost-regex$(SOVERSION)
	dh_install -plibboost-regex$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-regex-dev
	dh_installdirs -plibboost-regex-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/*regex* \
	   debian/libboost-regex-dev/usr/include/boost
	dh_install -plibboost-regex-dev
	dh_link -plibboost-regex-dev

	# package libboost-serialization$(SOVERSION)
	dh_install -plibboost-serialization$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-serialization-dev
	dh_installdirs -plibboost-serialization-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/*serialization* \
	   debian/libboost-serialization-dev/usr/include/boost
	dh_install -plibboost-serialization-dev
	dh_link -plibboost-serialization-dev

	# package libboost-signals$(SOVERSION)
	dh_install -plibboost-signals$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-signals-dev
	dh_installdirs -plibboost-signals-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/*signal* \
	   debian/libboost-signals-dev/usr/include/boost
	dh_install -plibboost-signals-dev
	dh_link -plibboost-signals-dev

	# package libboost-test$(SOVERSION)
	dh_install -plibboost-test$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-test-dev
	dh_installdirs -plibboost-test-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/test \
	   debian/libboost-test-dev/usr/include/boost
	dh_install -plibboost-test-dev
	dh_link -plibboost-test-dev

	# package libboost-thread$(SOVERSION)
	dh_install -plibboost-thread$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-thread-dev
	dh_installdirs -plibboost-thread-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/thread* \
	   debian/libboost-thread-dev/usr/include/boost
	dh_install -plibboost-thread-dev
	dh_link -plibboost-thread-dev \
	   usr/lib/libboost_thread-mt.a usr/lib/libboost_thread.a \
	   usr/lib/libboost_thread-mt.so usr/lib/libboost_thread.so

	# package libboost-wave$(SOVERSION)
	dh_install -plibboost-wave$(SOVERSION)$(DEBIAN_SUFFIX)
	# package libboost-wave-dev
	dh_installdirs -plibboost-wave-dev usr/include/boost
	mv debian/libboost-dev/usr/include/boost/wave* \
	   debian/libboost-wave-dev/usr/include/boost
	dh_install -plibboost-wave-dev
	dh_link -plibboost-wave-dev

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
	dh_installdocs --all debian/README.Debian
	dh_installexamples
	dh_installinfo
	dh_installchangelogs
	dh_strip -Nlibboost-dbg
	dh_link
	dh_compress -Xlibboost-doc/HTML
	dh_pysupport
	dh_python
	dh_fixperms

	@if [ "$(DH_OPTIONS)" = "-a" ]; then \
		echo DH_OPTIONS=-plibboost-dbg dh_makeshlibs -V"libboost-dbg $(SHLIBS_VERSION)"; \
		DH_OPTIONS=-plibboost-dbg dh_makeshlibs -V"libboost-dbg $(SHLIBS_VERSION)"; \
		for name in date-time filesystem graph iostreams program-options python regex serialization signals test thread wave; do \
			lib=libboost-$${name}$(SOVERSION)$(DEBIAN_SUFFIX); \
			echo DH_OPTIONS=-p$${lib} dh_makeshlibs -V"$${lib} $(SHLIBS_VERSION)"; \
			DH_OPTIONS=-p$${lib} dh_makeshlibs -V"$${lib} $(SHLIBS_VERSION)"; \
		done; \
	fi

	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb

# Build architecture independant packages using the common target.
binary-indep: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-a binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	$(MAKE) -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary-common binary install
