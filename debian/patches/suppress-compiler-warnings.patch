--- trunk.orig/boost/date_time/time.hpp
+++ trunk/boost/date_time/time.hpp
@@ -77,14 +77,14 @@
     /*! Optional bool parameter will return time zone as an offset 
      * (ie "+07:00"). Empty string is returned for classes that do 
      * not use a time_zone */
-    std::string zone_name(bool as_offset=false) const
+    std::string zone_name(bool = false) const
     {
       return time_system::zone_name(time_);
     }
     /*! Optional bool parameter will return time zone as an offset 
      * (ie "+07:00"). Empty string is returned for classes that do 
      * not use a time_zone */
-    std::string zone_abbrev(bool as_offset=false) const
+    std::string zone_abbrev(bool = false) const
     {
       return time_system::zone_name(time_);
     }
--- trunk.orig/boost/date_time/time_facet.hpp
+++ trunk/boost/date_time/time_facet.hpp
@@ -197,7 +197,7 @@
 #endif
 
     //! sets default formats for ptime, local_date_time, and time_duration
-    explicit time_facet(::size_t a_ref = 0) 
+    explicit time_facet(::size_t = 0) 
       //: base_type(standard_format),
       : base_type(default_time_format), 
         m_time_duration_format(string_type(duration_sign_negative_only) + default_time_duration_format)
--- trunk.orig/boost/graph/topological_sort.hpp
+++ trunk/boost/graph/topological_sort.hpp
@@ -37,7 +37,7 @@
       : m_iter(_iter) { }
     
     template <typename Edge, typename Graph>
-    void back_edge(const Edge& u, Graph&) { throw not_a_dag(); }
+    void back_edge(const Edge&, Graph&) { throw not_a_dag(); }
     
     template <typename Vertex, typename Graph> 
     void finish_vertex(const Vertex& u, Graph&) { *m_iter++ = u; }
