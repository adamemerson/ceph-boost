Debian bug #523343
Reported upstream as https://svn.boost.org/trac/boost/ticket/2744
This fix is upstream changeset https://svn.boost.org/trac/boost/changeset/53660

--- boost1.39-1.39.0.orig/libs/python/src/object/enum.cpp
+++ boost1.39-1.39.0/libs/python/src/object/enum.cpp
@@ -139,6 +139,7 @@
       dict d;
       d["__slots__"] = tuple();
       d["values"] = dict();
+      d["names"] = dict();
 
       object module_name = module_prefix();
       if (module_name)
@@ -191,18 +192,19 @@
     enum_object* p = downcast<enum_object>(x.ptr());
     Py_XDECREF(p->name);
     p->name = incref(name.ptr());
+
+    dict names_dict = extract<dict>(this->attr("names"))();
+    names_dict[x.attr("name")] = x;
 }
 
 void enum_base::export_values()
 {
-    dict d = extract<dict>(this->attr("values"))();
-    list values = d.values();
+    dict d = extract<dict>(this->attr("names"))();
+    list items = d.items();
     scope current;
-    
-    for (unsigned i = 0, max = len(values); i < max; ++i)
-    {
-        api::setattr(current, object(values[i].attr("name")), values[i]);
-    }
+
+    for (unsigned i = 0, max = len(items); i < max; ++i)
+        api::setattr(current, items[i][0], items[i][1]);
  }
 
 PyObject* enum_base::to_python(PyTypeObject* type_, long x)
--- boost1.39-1.39.0.orig/libs/python/test/enum.cpp
+++ boost1.39-1.39.0/libs/python/test/enum.cpp
@@ -12,7 +12,7 @@
 #endif 
 using namespace boost::python;
 
-enum color { red = 1, green = 2, blue = 4 };
+enum color { red = 1, green = 2, blue = 4, blood = 1 };
 
 #if BOOST_WORKAROUND(__MWERKS__, <= 0x2407)
 namespace boost  // Pro7 has a hard time detecting enums
@@ -34,6 +34,7 @@
         .value("red", red)
         .value("green", green)
         .value("blue", blue)
+        .value("blood", blood)
         .export_values()
         ;
     
--- boost1.39-1.39.0.orig/libs/python/test/enum.py
+++ boost1.39-1.39.0/libs/python/test/enum.py
@@ -4,8 +4,8 @@
 '''
 >>> from enum_ext import *
 
->>> identity(color.red)
-enum_ext.color.red
+>>> identity(color.red) # in case of duplicated enums it always take the last enum
+enum_ext.color.blood
 
 >>> identity(color.green)
 enum_ext.color.green
@@ -13,8 +13,8 @@
 >>> identity(color.blue)
 enum_ext.color.blue
 
->>> identity(color(1))
-enum_ext.color.red
+>>> identity(color(1)) # in case of duplicated enums it always take the last enum
+enum_ext.color.blood
 
 >>> identity(color(2))
 enum_ext.color.green
@@ -28,7 +28,7 @@
   --- check export to scope ---
 
 >>> identity(red)
-enum_ext.color.red
+enum_ext.color.blood
 
 >>> identity(green)
 enum_ext.color.green
@@ -42,10 +42,18 @@
 
 >>> c = colorized()
 >>> c.x
-enum_ext.color.red
+enum_ext.color.blood
 >>> c.x = green
 >>> c.x
 enum_ext.color.green
+>>> red == blood
+True
+>>> red == green
+False
+>>> hash(red) == hash(blood)
+True
+>>> hash(red) == hash(green)
+False
 '''
 
 # pickling of enums only works with Python 2.3 or higher
